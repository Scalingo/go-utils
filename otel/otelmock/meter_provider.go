// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: MeterProvider)

// Package otelmock is a generated GoMock package.
package otelmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockMeterProvider is a mock of MeterProvider interface.
type MockMeterProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMeterProviderMockRecorder
}

// MockMeterProviderMockRecorder is the mock recorder for MockMeterProvider.
type MockMeterProviderMockRecorder struct {
	mock *MockMeterProvider
}

// NewMockMeterProvider creates a new mock instance.
func NewMockMeterProvider(ctrl *gomock.Controller) *MockMeterProvider {
	mock := &MockMeterProvider{ctrl: ctrl}
	mock.recorder = &MockMeterProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterProvider) EXPECT() *MockMeterProviderMockRecorder {
	return m.recorder
}

// Meter mocks base method.
func (m *MockMeterProvider) Meter(arg0 string, arg1 ...metric.MeterOption) metric.Meter {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Meter", varargs...)
	ret0, _ := ret[0].(metric.Meter)
	return ret0
}

// Meter indicates an expected call of Meter.
func (mr *MockMeterProviderMockRecorder) Meter(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meter", reflect.TypeOf((*MockMeterProvider)(nil).Meter), varargs...)
}

// meterProvider mocks base method.
func (m *MockMeterProvider) meterProvider() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "meterProvider")
}

// meterProvider indicates an expected call of meterProvider.
func (mr *MockMeterProviderMockRecorder) meterProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "meterProvider", reflect.TypeOf((*MockMeterProvider)(nil).meterProvider))
}
