// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: Int64Gauge)

// Package otelmock is a generated GoMock package.
package otelmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockInt64Gauge is a mock of Int64Gauge interface.
type MockInt64Gauge struct {
	metric.Int64Gauge

	ctrl     *gomock.Controller
	recorder *MockInt64GaugeMockRecorder
}

// MockInt64GaugeMockRecorder is the mock recorder for MockInt64Gauge.
type MockInt64GaugeMockRecorder struct {
	mock *MockInt64Gauge
}

// NewMockInt64Gauge creates a new mock instance.
func NewMockInt64Gauge(ctrl *gomock.Controller) *MockInt64Gauge {
	mock := &MockInt64Gauge{ctrl: ctrl}
	mock.recorder = &MockInt64GaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInt64Gauge) EXPECT() *MockInt64GaugeMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockInt64Gauge) Record(arg0 context.Context, arg1 int64, arg2 ...metric.RecordOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Record", varargs...)
}

// Record indicates an expected call of Record.
func (mr *MockInt64GaugeMockRecorder) Record(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockInt64Gauge)(nil).Record), varargs...)
}

// int64Gauge mocks base method.
func (m *MockInt64Gauge) int64Gauge() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "int64Gauge")
}

// int64Gauge indicates an expected call of int64Gauge.
func (mr *MockInt64GaugeMockRecorder) int64Gauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "int64Gauge", reflect.TypeOf((*MockInt64Gauge)(nil).int64Gauge))
}
