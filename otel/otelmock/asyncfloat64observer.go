// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: Float64Observer)

// Package otelmock is a generated GoMock package.
package otelmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockFloat64Observer is a mock of Float64Observer interface.
type MockFloat64Observer struct {
	metric.Float64Observer

	ctrl     *gomock.Controller
	recorder *MockFloat64ObserverMockRecorder
}

// MockFloat64ObserverMockRecorder is the mock recorder for MockFloat64Observer.
type MockFloat64ObserverMockRecorder struct {
	mock *MockFloat64Observer
}

// NewMockFloat64Observer creates a new mock instance.
func NewMockFloat64Observer(ctrl *gomock.Controller) *MockFloat64Observer {
	mock := &MockFloat64Observer{ctrl: ctrl}
	mock.recorder = &MockFloat64ObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloat64Observer) EXPECT() *MockFloat64ObserverMockRecorder {
	return m.recorder
}

// Observe mocks base method.
func (m *MockFloat64Observer) Observe(arg0 float64, arg1 ...metric.ObserveOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Observe", varargs...)
}

// Observe indicates an expected call of Observe.
func (mr *MockFloat64ObserverMockRecorder) Observe(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockFloat64Observer)(nil).Observe), varargs...)
}

// float64Observer mocks base method.
func (m *MockFloat64Observer) float64Observer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "float64Observer")
}

// float64Observer indicates an expected call of float64Observer.
func (mr *MockFloat64ObserverMockRecorder) float64Observer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "float64Observer", reflect.TypeOf((*MockFloat64Observer)(nil).float64Observer))
}
