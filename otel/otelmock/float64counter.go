// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: Float64Counter)

// Package otelmock is a generated GoMock package.
package otelmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockFloat64Counter is a mock of Float64Counter interface.
type MockFloat64Counter struct {
	metric.Float64Counter

	ctrl     *gomock.Controller
	recorder *MockFloat64CounterMockRecorder
}

// MockFloat64CounterMockRecorder is the mock recorder for MockFloat64Counter.
type MockFloat64CounterMockRecorder struct {
	mock *MockFloat64Counter
}

// NewMockFloat64Counter creates a new mock instance.
func NewMockFloat64Counter(ctrl *gomock.Controller) *MockFloat64Counter {
	mock := &MockFloat64Counter{ctrl: ctrl}
	mock.recorder = &MockFloat64CounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloat64Counter) EXPECT() *MockFloat64CounterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFloat64Counter) Add(arg0 context.Context, arg1 float64, arg2 ...metric.AddOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Add", varargs...)
}

// Add indicates an expected call of Add.
func (mr *MockFloat64CounterMockRecorder) Add(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFloat64Counter)(nil).Add), varargs...)
}

// float64Counter mocks base method.
func (m *MockFloat64Counter) float64Counter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "float64Counter")
}

// float64Counter indicates an expected call of float64Counter.
func (mr *MockFloat64CounterMockRecorder) float64Counter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "float64Counter", reflect.TypeOf((*MockFloat64Counter)(nil).float64Counter))
}
