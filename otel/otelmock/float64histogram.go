// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: Float64Histogram)

// Package otelmock is a generated GoMock package.
package otelmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockFloat64Histogram is a mock of Float64Histogram interface.
type MockFloat64Histogram struct {
	ctrl     *gomock.Controller
	recorder *MockFloat64HistogramMockRecorder
}

// MockFloat64HistogramMockRecorder is the mock recorder for MockFloat64Histogram.
type MockFloat64HistogramMockRecorder struct {
	mock *MockFloat64Histogram
}

// NewMockFloat64Histogram creates a new mock instance.
func NewMockFloat64Histogram(ctrl *gomock.Controller) *MockFloat64Histogram {
	mock := &MockFloat64Histogram{ctrl: ctrl}
	mock.recorder = &MockFloat64HistogramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloat64Histogram) EXPECT() *MockFloat64HistogramMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockFloat64Histogram) Record(arg0 context.Context, arg1 float64, arg2 ...metric.RecordOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Record", varargs...)
}

// Record indicates an expected call of Record.
func (mr *MockFloat64HistogramMockRecorder) Record(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockFloat64Histogram)(nil).Record), varargs...)
}

// float64Histogram mocks base method.
func (m *MockFloat64Histogram) float64Histogram() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "float64Histogram")
}

// float64Histogram indicates an expected call of float64Histogram.
func (mr *MockFloat64HistogramMockRecorder) float64Histogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "float64Histogram", reflect.TypeOf((*MockFloat64Histogram)(nil).float64Histogram))
}
