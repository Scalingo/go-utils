// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: Float64Gauge)

// Package otelmock is a generated GoMock package.
package otelmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockFloat64Gauge is a mock of Float64Gauge interface.
type MockFloat64Gauge struct {
	metric.Float64Gauge

	ctrl     *gomock.Controller
	recorder *MockFloat64GaugeMockRecorder
}

// MockFloat64GaugeMockRecorder is the mock recorder for MockFloat64Gauge.
type MockFloat64GaugeMockRecorder struct {
	mock *MockFloat64Gauge
}

// NewMockFloat64Gauge creates a new mock instance.
func NewMockFloat64Gauge(ctrl *gomock.Controller) *MockFloat64Gauge {
	mock := &MockFloat64Gauge{ctrl: ctrl}
	mock.recorder = &MockFloat64GaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloat64Gauge) EXPECT() *MockFloat64GaugeMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockFloat64Gauge) Record(arg0 context.Context, arg1 float64, arg2 ...metric.RecordOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Record", varargs...)
}

// Record indicates an expected call of Record.
func (mr *MockFloat64GaugeMockRecorder) Record(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockFloat64Gauge)(nil).Record), varargs...)
}

// float64Gauge mocks base method.
func (m *MockFloat64Gauge) float64Gauge() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "float64Gauge")
}

// float64Gauge indicates an expected call of float64Gauge.
func (mr *MockFloat64GaugeMockRecorder) float64Gauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "float64Gauge", reflect.TypeOf((*MockFloat64Gauge)(nil).float64Gauge))
}
