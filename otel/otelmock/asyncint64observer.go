// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: Int64Observer)

// Package otelmock is a generated GoMock package.
package otelmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockInt64Observer is a mock of Int64Observer interface.
type MockInt64Observer struct {
	metric.Int64Observer

	ctrl     *gomock.Controller
	recorder *MockInt64ObserverMockRecorder
}

// MockInt64ObserverMockRecorder is the mock recorder for MockInt64Observer.
type MockInt64ObserverMockRecorder struct {
	mock *MockInt64Observer
}

// NewMockInt64Observer creates a new mock instance.
func NewMockInt64Observer(ctrl *gomock.Controller) *MockInt64Observer {
	mock := &MockInt64Observer{ctrl: ctrl}
	mock.recorder = &MockInt64ObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInt64Observer) EXPECT() *MockInt64ObserverMockRecorder {
	return m.recorder
}

// Observe mocks base method.
func (m *MockInt64Observer) Observe(arg0 int64, arg1 ...metric.ObserveOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Observe", varargs...)
}

// Observe indicates an expected call of Observe.
func (mr *MockInt64ObserverMockRecorder) Observe(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockInt64Observer)(nil).Observe), varargs...)
}

// int64Observer mocks base method.
func (m *MockInt64Observer) int64Observer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "int64Observer")
}

// int64Observer indicates an expected call of int64Observer.
func (mr *MockInt64ObserverMockRecorder) int64Observer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "int64Observer", reflect.TypeOf((*MockInt64Observer)(nil).int64Observer))
}
