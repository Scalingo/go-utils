// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: Observer)

// Package otelmock is a generated GoMock package.
package otelmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockObserver is a mock of Observer interface.
type MockObserver struct {
	metric.Observer

	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
}

// MockObserverMockRecorder is the mock recorder for MockObserver.
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance.
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return m.recorder
}

// ObserveFloat64 mocks base method.
func (m *MockObserver) ObserveFloat64(arg0 metric.Float64Observable, arg1 float64, arg2 ...metric.ObserveOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ObserveFloat64", varargs...)
}

// ObserveFloat64 indicates an expected call of ObserveFloat64.
func (mr *MockObserverMockRecorder) ObserveFloat64(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveFloat64", reflect.TypeOf((*MockObserver)(nil).ObserveFloat64), varargs...)
}

// ObserveInt64 mocks base method.
func (m *MockObserver) ObserveInt64(arg0 metric.Int64Observable, arg1 int64, arg2 ...metric.ObserveOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ObserveInt64", varargs...)
}

// ObserveInt64 indicates an expected call of ObserveInt64.
func (mr *MockObserverMockRecorder) ObserveInt64(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveInt64", reflect.TypeOf((*MockObserver)(nil).ObserveInt64), varargs...)
}

// observer mocks base method.
func (m *MockObserver) observer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "observer")
}

// observer indicates an expected call of observer.
func (mr *MockObserverMockRecorder) observer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "observer", reflect.TypeOf((*MockObserver)(nil).observer))
}
